on:
  push:
    branches:
      - master
  release:
    types: [published]
  pull_request:
    branches:
      - master
jobs:

  buildNative:
    strategy:
      matrix:
        os: [ubuntu-latest,windows-latest]
        include:
          - os: ubuntu-latest
            scriptExt: "sh"
            libExt: "so"
            name: "linux"
          - os: windows-latest
            scriptExt: "bat"
            libExt: "dll"
            name: "windows"
          - os: macos-latest
            scriptExt: "sh"
            libExt: "dylib"
            name: "macos"
    name: Build Natives - ${{ matrix.name }}
    runs-on:  ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v2
        with:
            fetch-depth: 1
            submodules: true

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      - name: Install dependencies for ubuntu-latest
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install libpulse-dev libglvnd-dev libx11-dev libopenal-dev libvulkan-dev libgl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev libgtk-3-dev ninja-build swig

      - name: Install dependencies for macos-latest
        if: matrix.os == 'macos-latest'
        run: |
          brew install swig
          cd src/cpp/Effekseer/
          git submodule update --init --recommend-shallow --depth 1

      - name: Install dependencies for windows-latest
        if: matrix.os == 'windows-latest'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install swig

      - name: Generate Swig Wrappers
        shell: bash
        run: |
          cd src
          chmod +x ./generate_swig_wrapper.${{ matrix.scriptExt }}
          ./generate_swig_wrapper.${{ matrix.scriptExt }}
          cd ..

      - name: Build natives for ${{ matrix.name }}
        shell: bash
        run: |  
          mkdir -p build/dist-native

          cd build

          cmake -D BUILD_DX12=OFF -D BUILD_EXAMPLES=OFF ..
          cmake --build . --config Release

          dest="dist-native/${{ matrix.name }}/x86_64"
          mkdir -p "$dest"
          cp -v src/cpp/Release/*.${{ matrix.libExt }} "$dest"||cp -v src/cpp/*.${{ matrix.libExt }} "$dest"

      - name: LDD to debug
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cd build
          result=`ldd -d dist-native/linux/x86_64/libEffekseerNativeForJava.so`
          echo "$result"
          if [ "`echo $result | grep 'undefined symbol'`" ]; then
             exit 1
          fi

      - name: Upload Natives
        uses: actions/upload-artifact@v4
        with:
          name: natives-${{ matrix.runs-on }}
          path: build/dist-native

  
